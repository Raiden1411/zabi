.{
    .name = "zabi",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.5.1",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // Internet connectivity.
    .dependencies = .{
        .ws = .{
            .url = "git+https://github.com/karlseguin/websocket.zig.git#2bee1a5cda0f73f1c7cd8442afa976293e9367e4",
            .hash = "1220e865782b750953fdd6924f85a3a32bb4ecdb58d3c85f4414278d161f386f60ca",
        },
        .secp256k1 = .{ .path = "./pkg/libsecp256k1" },
        .@"c-kzg-4844" = .{ .path = "./pkg/c-kzg-4844" },
        .blst = .{ .path = "./pkg/blst" },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "build.zig",
        "build.zig.zon",
        "src/",
        "pkg/",
        "README.md",
        "LICENSE",
    },
}
