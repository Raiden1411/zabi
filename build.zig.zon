.{
    .name = "zabi",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.12.4",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // Internet connectivity.
    .dependencies = .{
        .ws = .{
            .url = "git+https://github.com/karlseguin/websocket.zig.git#48eddb46e3fe3b210dd41696aec2ca00cfaf1e70",
            .hash = "12208cd2d414b4477c365c5eb4c04b077216f8dbe1e2174615c9aab8d495a8c5f231",
        },
        .@"c-kzg-4844" = .{ .path = "./pkg/c-kzg-4844" },
        .blst = .{ .path = "./pkg/blst" },
        .zg = .{
            .url = "git+https://codeberg.org/dude_the_builder/zg.git#70d17ea7aab18178a5f5ffa120229151a8f943e6",
            .hash = "1220f639e56684b7b69ffd6856771a659a81aa3aff4a1320c0f0dfe62d98e39778ed",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "build.zig",
        "build.zig.zon",
        "src/",
        "pkg/",
        "README.md",
        "LICENSE",
    },
}
