.{
    .name = "zabi",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.3.1",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // Internet connectivity.
    .dependencies = .{ .ws = .{
        .url = "git+https://github.com/karlseguin/websocket.zig.git#1f2c4a56c642dab52fe12cdda1bd3f56865d1f86",
        .hash = "1220ce168e550f8904364acd0a72f5cafd40caa08a50ba83aac50b97ba700d7bcf20",
    }, .secp256k1 = .{ .path = "./pkg/libsecp256k1" }, .@"c-kzg-4844" = .{ .path = "./pkg/c-kzg-4844" }, .blst = .{ .path = "./pkg/blst" } },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "build.zig",
        "build.zig.zon",
        "src/",
        "pkg/",
        "README.md",
        "LICENSE",
    },
}
